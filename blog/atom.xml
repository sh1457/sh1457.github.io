<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>My Remembrall - Remembrall</title>
	<subtitle>Personal website and blog</subtitle>
	<link href="https://sh1457.github.io/blog/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://sh1457.github.io/blog/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-01-08T00:00:00+00:00</updated>
	<id>https://sh1457.github.io/blog/atom.xml</id>
	<entry xml:lang="en">
		<title>Choosing the right Jio prepaid plan</title>
		<published>2022-01-07T00:00:00+00:00</published>
		<updated>2022-01-08T00:00:00+00:00</updated>
		<link href="https://sh1457.github.io/blog/choosing-the-right-jio-prepaid-plan/" type="text/html"/>
		<id>https://sh1457.github.io/blog/choosing-the-right-jio-prepaid-plan/</id>
		<content type="html">&lt;p&gt;Network operators have so many plans on offer these days and easily make the customer go through decision hell. I wrote a script to give me the plan details in an easy to compare way.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The script goes to the Jio website prepaid 4g plans page and gets the details of each listed plans. Then using a logic to compute attributes like &lt;code&gt;price per day&lt;&#x2F;code&gt; and &lt;code&gt;data_per_day&lt;&#x2F;code&gt; to get an apple to apple comparison across plans with different validity and data.&lt;&#x2F;p&gt;
&lt;table&gt;
    &lt;thead&gt;&lt;th&gt;price&lt;&#x2F;th&gt;&lt;th&gt;validity&lt;&#x2F;th&gt;&lt;th&gt;data&lt;&#x2F;th&gt;&lt;th&gt;daily&lt;&#x2F;th&gt;&lt;th&gt;total data&lt;&#x2F;th&gt;&lt;th&gt;data per day&lt;&#x2F;th&gt;&lt;th&gt;price per day&lt;&#x2F;th&gt;&lt;&#x2F;thead&gt;
    &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1559&lt;&#x2F;td&gt;&lt;td&gt;336&lt;&#x2F;td&gt;&lt;td&gt;24.0&lt;&#x2F;td&gt;&lt;td&gt;False&lt;&#x2F;td&gt;&lt;td&gt;24.0&lt;&#x2F;td&gt;&lt;td&gt;0.07&lt;&#x2F;td&gt;&lt;td&gt;4.64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;395&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;6.0&lt;&#x2F;td&gt;&lt;td&gt;False&lt;&#x2F;td&gt;&lt;td&gt;6.0&lt;&#x2F;td&gt;&lt;td&gt;0.07&lt;&#x2F;td&gt;&lt;td&gt;4.7&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;155&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;False&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;0.07&lt;&#x2F;td&gt;&lt;td&gt;5.54&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;149&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;20.0&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;7.45&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;179&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;24.0&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;7.46&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;209&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;28.0&lt;&#x2F;td&gt;&lt;td&gt;1.0&lt;&#x2F;td&gt;&lt;td&gt;7.46&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2545&lt;&#x2F;td&gt;&lt;td&gt;336&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;504.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;7.57&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2879&lt;&#x2F;td&gt;&lt;td&gt;365&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;730.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;7.89&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;666&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;126.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;7.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;666&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;126.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;7.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2999&lt;&#x2F;td&gt;&lt;td&gt;365&lt;&#x2F;td&gt;&lt;td&gt;2.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;912.5&lt;&#x2F;td&gt;&lt;td&gt;2.5&lt;&#x2F;td&gt;&lt;td&gt;8.22&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;119&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;21.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;8.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;239&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;42.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;8.54&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3119&lt;&#x2F;td&gt;&lt;td&gt;365&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;740.0&lt;&#x2F;td&gt;&lt;td&gt;2.03&lt;&#x2F;td&gt;&lt;td&gt;8.55&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;479&lt;&#x2F;td&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;84.0&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;8.55&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;719&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;168.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;8.56&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;719&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;168.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;8.56&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;199&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;34.5&lt;&#x2F;td&gt;&lt;td&gt;1.5&lt;&#x2F;td&gt;&lt;td&gt;8.65&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;533&lt;&#x2F;td&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;112.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;9.52&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;296&lt;&#x2F;td&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;25.0&lt;&#x2F;td&gt;&lt;td&gt;False&lt;&#x2F;td&gt;&lt;td&gt;25.0&lt;&#x2F;td&gt;&lt;td&gt;0.83&lt;&#x2F;td&gt;&lt;td&gt;9.87&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;299&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;56.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;10.68&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;299&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;56.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;10.68&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;249&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;46.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;10.83&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4199&lt;&#x2F;td&gt;&lt;td&gt;365&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;1095.0&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;11.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;1066&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;173.0&lt;&#x2F;td&gt;&lt;td&gt;2.06&lt;&#x2F;td&gt;&lt;td&gt;12.69&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;799&lt;&#x2F;td&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;112.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;14.27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;1199&lt;&#x2F;td&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;252.0&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;14.27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;419&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;84.0&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;14.96&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;499&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;56.0&lt;&#x2F;td&gt;&lt;td&gt;2.0&lt;&#x2F;td&gt;&lt;td&gt;17.82&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;601&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;3.0&lt;&#x2F;td&gt;&lt;td&gt;True&lt;&#x2F;td&gt;&lt;td&gt;90.0&lt;&#x2F;td&gt;&lt;td&gt;3.21&lt;&#x2F;td&gt;&lt;td&gt;21.46&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;After taking a look at the first few plans, they are all non-daily plans. Unless you are completely covered by WiFi wherever you go these plans do not make much sense. Nowadays the consumption of navigation app or a music streaming app on-the-go is not small. Just travelling between WiFi networks while commuting will exhaust your data.&lt;&#x2F;p&gt;
&lt;p&gt;Then follows the plans that are cost optimal but have lesser validity (&lt;em&gt;&amp;lt;1 month&lt;&#x2F;em&gt;), these make sense under certain circumstances.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You will recharge regularly and more frequently&lt;&#x2F;li&gt;
&lt;li&gt;You are trying out different plans or even planning to switch networks&lt;&#x2F;li&gt;
&lt;li&gt;Jio will continue to keep the plan or similar plan in the future
&lt;ul&gt;
&lt;li&gt;If Jio decides to hike the plan(s) after you recharge then it may not be cost optimal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Then finally we get the plan which has &lt;strong&gt;long term validity&lt;&#x2F;strong&gt;, &lt;strong&gt;sufficient data daily&lt;&#x2F;strong&gt; and is &lt;strong&gt;cost optimal&lt;&#x2F;strong&gt;. This is the plan that most should go for. Recharge once and forget about it till the next recharge.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the plans down the list are going to vary in terms of validity, data and addons provided (&lt;em&gt;like hotstar mobile&lt;&#x2F;em&gt;). They are not bad plans if you need those specific features like 3 GB&#x2F;day or want to use the addons. But the &lt;code&gt;price_per_day&lt;&#x2F;code&gt; value will show a better picture.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note: This sort of analysis is interesting to see the design of the marketing and sales teams. Also, if the analysis is repeated every time they plans are updated we can look at the pricing strategy. Whether plan prices are manipulated around holidays to maximize profits. Or whether there is some seasonality to the pricing strategy.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer: This analysis is automatic and is not responsible for customers missing on website&#x2F;app offers and discounts. Just use this as a reference. Article will update automatically.&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Advent of Code &#x2F; 2021 &#x2F; Day 1</title>
		<published>2021-12-06T00:00:00+00:00</published>
		<updated>2022-01-06T00:00:00+00:00</updated>
		<link href="https://sh1457.github.io/blog/aoc-2021-day1/" type="text/html"/>
		<id>https://sh1457.github.io/blog/aoc-2021-day1/</id>
		<content type="html">&lt;p&gt;Let&#x27;s solve &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2021&#x2F;day&#x2F;1&quot;&gt;day 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-1&quot;&gt;Part 1&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h4&gt;
&lt;p&gt;The input is a list of integers. The result is the number of sequence pairs that are increasing.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;crux&quot;&gt;Crux&lt;&#x2F;h4&gt;
&lt;p&gt;The idea here is to keep track of the number of increasing sequential numbers. Using &lt;code&gt;zip&lt;&#x2F;code&gt; we can iterate simultaneously through the list slices, one from the start till the penultimate element and the other from the second element till the end. Then we just need to check if the element is greater than it&#x27;s previous element to increment a counter.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff5e5e;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;solution1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;elem, prev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(inputs[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:], inputs[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;prev:
&lt;&#x2F;span&gt;&lt;span&gt;            counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;counter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;part-2&quot;&gt;Part 2&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;problem-1&quot;&gt;Problem&lt;&#x2F;h4&gt;
&lt;p&gt;The problem is almost the same except we need to consider 3 elements summed and the next 3 elements. This combination of sequential elements is a window. In this case a window of size 3. The task is simplified since we only need the sum of the window.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;crux-1&quot;&gt;Crux&lt;&#x2F;h4&gt;
&lt;p&gt;The main idea is to define the windows. The rest of the solution works on the windows instead.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;solution-1&quot;&gt;Solution&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff5e5e;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;solution2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    window_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;    final_window_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(inputs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;window_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    windows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(inputs[i:i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;window_size])
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(final_window_index)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;solution1&lt;&#x2F;span&gt;&lt;span&gt;(windows)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Advent of Code</title>
		<published>2021-12-05T00:00:00+00:00</published>
		<updated>2022-01-06T00:00:00+00:00</updated>
		<link href="https://sh1457.github.io/blog/advent-of-code/" type="text/html"/>
		<id>https://sh1457.github.io/blog/advent-of-code/</id>
		<content type="html">&lt;p&gt;I&#x27;ve known about &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&quot;&gt;Advent of Code&lt;&#x2F;a&gt; for a around 3 years now. I try to solve it but somehow lose steam partway through. Mostly because it&#x27;s december and the holiday season is ripe with distractions and other plans.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Here&#x27;s what it is for the uninitiated (&lt;em&gt;ripped straight from their about page&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi! I&#x27;m Eric Wastl. I make Advent of Code. I hope you like it! I also made Vanilla JS, PHP Sadness, and lots of other things. You can find me on Twitter and GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I mostly solve these kinds of challenges with &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&quot;&gt;python&lt;&#x2F;a&gt;. Python is an interpreted language but is able to express intuitive and readable solutions. I do plan to try at least one or more compiled language as well as a challenge to myself. But it has been many years since I dealt with low level memory management and pointers. But nonetheless &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&quot;&gt;zig&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;rust&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&quot;&gt;go&lt;&#x2F;a&gt; seem very promising.&lt;&#x2F;p&gt;
&lt;p&gt;Over the years, I built a toolchain to effectively organize and solve such programming challenges. I have certain helpers to quickly debug&#x2F;test solutions.&lt;&#x2F;p&gt;
&lt;p&gt;Advent of Code is different in the sense that you are provided a unique input set and simply need to provide the result to that given input set. Hence we can be a bit more relaxed about the solution time constraints. Although as mentioned by the creator there is always a solution that will complete in under 15s even on older hardware. The problems are designed in such a way that only solutions with the right time complexity can provide an answer in reasonable time, especially in the later stage.&lt;&#x2F;p&gt;
&lt;p&gt;Some useful helper functions are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a function that takes in the solution function, [list of] input and [list of] expected output and returns [list of] result&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff5e5e;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;solve&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;: Callable,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[Any],
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;expected_outputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[Any]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;[Any]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;inp, exp_out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(inputs, expected_outputs):
&lt;&#x2F;span&gt;&lt;span&gt;        out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(inp)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;exp_out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Failed!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;a function that times the solution function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff5e5e;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;log_time&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;: Callable) -&amp;gt; Callable:
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wraps&lt;&#x2F;span&gt;&lt;span&gt;(func)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5e5e;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;wrapper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;kwargs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        start_time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;args, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;kwargs)
&lt;&#x2F;span&gt;&lt;span&gt;        end_time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        duration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;end_time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;start_time
&lt;&#x2F;span&gt;&lt;span&gt;        msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span&gt;{func.__name__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;!r&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; executed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; in &lt;&#x2F;span&gt;&lt;span&gt;{duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;:.4f&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(msg)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;wrapper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;a function that profiles the solution function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have not yet implemented such a function. While I have used the profiler present in the standard library &lt;code&gt;cprofile&lt;&#x2F;code&gt;, I have yet to use it extensively in the context of programming challenges. Most of my approach depends on estimating the time complexity and optimizing the solution (almost using only the standard library). Very rarely would I need to run a profiler to see where the slowness is coming from.&lt;&#x2F;p&gt;
&lt;p&gt;These are solution independent and usable across challenges. Many end up creating a similar toolchain.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building static websites</title>
		<published>2021-06-18T00:00:00+00:00</published>
		<updated>2022-01-06T00:00:00+00:00</updated>
		<link href="https://sh1457.github.io/blog/building-my-remembrall/introduction/" type="text/html"/>
		<id>https://sh1457.github.io/blog/building-my-remembrall/introduction/</id>
		<content type="html">&lt;p&gt;A static website is collection of content that does not change and can be served completely to the client. Such websites are easy to download for offline browsing.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Examples of such sites are documentation, small websites, blogs, book as a website. These sites have little to no dynamic content - content that changes at a rate where a server would be required to serve it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;static-website-generators&quot;&gt;Static website generators&lt;&#x2F;h4&gt;
&lt;p&gt;Static website generators are tools that build static websites. There are many tools nowadays implemented in various languages both interpreted and compiled. Building static websites is not a critical task in the view of the user. That&#x27;s why tool performance is not the main criteria for choosing the right tool. But nonetheless the authors&#x2F;creators would appreciate fast builds and deploys.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Tool&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Lang&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Jekyll&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ruby&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Hugo&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;go&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Zola&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;rust&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Pelican&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;python&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;But at the heart each tool provides configuration to create flexible site structures. The tools aim to separate the content from the styling. Content can be created in the form of text documents in markdown formats for example.&lt;&#x2F;p&gt;
&lt;p&gt;The have similar mechanics.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Initialize the tool
&lt;ul&gt;
&lt;li&gt;create a skeleton folder structure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Build templates&lt;&#x2F;li&gt;
&lt;li&gt;Write content&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Then there is a build process, the tool takes the content and templates and binds them together to form the resultant HTML file. This file can then be opened on the browser or served on a web server to be available on the internet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; is a fantastic static site generator which provides a lot of flexibility in developing and organizing websites. It&#x27;s built in rust and uses the tera template language. After creating templates, it makes it real easy to focus on content in markdown.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;Tailwind&lt;&#x2F;a&gt; is a utilitarian css framework that&#x27;s been taking over the internet recently. The fact that any&#x2F;most requirements can be satisfied with their pre-built classes is amazing. Makes it even better that the css is now maintained in the html. No need to have multiple tabs to web design ever again.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
